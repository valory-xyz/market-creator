agent_name: market_maker
author: valory
version: 0.1.0
license: Apache-2.0
description: The market maker agent.
aea_version: '>=1.19.0, <2.0.0'
fingerprint:
  README.md: bafybeiayhfxag74adpnrcejngjx6n333kbhucrg2p3fktdgq4wqy3dl7ky
  __init__.py: bafybeifamf4vln3qgmifksv5icmhnkelqirbaauehuv5hpsu2twesb2vni
fingerprint_ignore_patterns: []
connections:
- valory/abci:0.1.0:bafybeig6difzdar2n5gya7cq2xa7c2rxxp65xlxviatqzg33kivvc3zaam
- valory/http_client:0.23.0:bafybeieoeuy4brzimtnubmokwirhrx27ezls6cdnl5qik4rkykfle3nn2y
- valory/ledger:0.19.0:bafybeiejc7g7ebv3cleiqb4f4h4pspcu6vtr54332szwlqiabfs3sfdh44
- valory/openai:0.1.0:bafybeidnryrgq6jp3mqvjcpei4nesbey54fhyrcvginby7fer32z32kpai
- valory/p2p_libp2p_client:0.1.0:bafybeihdnfdth3qgltefgrem7xyi4b3ejzaz67xglm2hbma2rfvpl2annq
contracts:
- valory/gnosis_safe:0.1.0:bafybeic3ajabs7sl6qgkzy452szlsdeitj746kdzfd7k4m4ixtxw4g33qi
- valory/gnosis_safe_proxy_factory:0.1.0:bafybeigbtbgzqlt4tufgymtjsyxiqvivxmtc4csx43hmo5nexmdfcxm6bi
- valory/multisend:0.1.0:bafybeict2k3vf3c4fvzosaq5kku2ivtzsskbomrujmmoicut7eg52onnje
- valory/realtio:0.1.0:bafybeihoj7w5dqdyo6ds2rdmi326cvl5wuc7xp6yms7lwks35m4nqypk4q
- valory/conditional_tokens:0.1.0:bafybeig5vtn7bzpegfrzehdgeezqcnox3xlb5i54ehnqndazhcfh3bkdcq
- valory/fpmm_deterministic_factory:0.1.0:bafybeig4ztnqgyaespzlcmcom56nvmi4c4paddsxsjsh5q7olnylu3z7ou
- valory/service_registry:0.1.0:bafybeiae7nr5fqn6ckt3ehol27qfd4o5ljzx6kk5k32lgtrvj3mtb62ufm
- valory/wxdai:0.1.0:bafybeie3c5enerf54jt75xc62mbzck4kjqxpjx2mzo6v4rrz4dmcy4xdgy
protocols:
- open_aea/signing:1.0.0:bafybeifuxs7gdg2okbn7uofymenjlmnih2wxwkym44lsgwmklgwuckxm2m
- valory/abci:0.1.0:bafybeigootsvqpk6th5xpdtzanxum3earifrrezfyhylfrit7yvqdrtgpe
- valory/acn:1.1.0:bafybeiapa5ilsobggnspoqhspftwolrx52udrwmaxdxgrk26heuvl4oooa
- valory/contract_api:1.0.0:bafybeiasywsvax45qmugus5kxogejj66c5taen27h4voriodz7rgushtqa
- valory/http:1.0.0:bafybeia5bxdua2i6chw6pg47bvoljzcpuqxzy4rdrorbdmcbnwmnfdobtu
- valory/ipfs:0.1.0:bafybeibjzhsengtxfofqpxy6syamplevp35obemwfp4c5lhag3v2bvgysa
- valory/ledger_api:1.0.0:bafybeigsvceac33asd6ecbqev34meyyjwu3rangenv6xp5rkxyz4krvcby
- valory/llm:1.0.0:bafybeicpd5hxe5rlgp75kaqotzpy3jkdyl5pbdcutwqdzlqfknnmkgadsy
- valory/tendermint:0.1.0:bafybeidjqmwvgi4rqgp65tbkhmi45fwn2odr5ecezw6q47hwitsgyw4jpa
skills:
- valory/abstract_abci:0.1.0:bafybeiamr3cwetayz6lr72buhq6iviabtboj4hhpq47tlumimxolvvqjcy
- valory/abstract_round_abci:0.1.0:bafybeiaseziuvbzh3trjggl5hx2tv3fduqrpiwiyksudaf6nvuxmwrg74i
- valory/market_maker_abci:0.1.0:bafybeicy2an4jprilo57tyqd3bsgrklspekzl7fgz6lxqiulg4xd5sxrje
- valory/registration_abci:0.1.0:bafybeibafy7qmcvvzaykimy3mbqdwtcuajmbghqilaa7zwkh6wla33cfce
- valory/market_creation_manager_abci:0.1.0:bafybeiakvlcgrmtiqb6ailf2mt5ecftlpahe4ysqye3kh2dbsquxxbvsca
- valory/market_validation_abci:0.1.0:bafybeide4ixzpxii2mwv35llxdyzafl4ovdt5os5icu2zugvgdobg75cxu
- valory/reset_pause_abci:0.1.0:bafybeialcwck7fahrr23jckv5qjwg3cdq4ai2ihyjsofnbj44jzyl4cjmm
- valory/termination_abci:0.1.0:bafybeifqsogqiar4yook5bu3j6z66dbdcizey7dr3e5oxeocdjijvfbaja
- valory/transaction_settlement_abci:0.1.0:bafybeiacwr7p4nhhufoey7uz2jqkegrlykdrmc7mm3rzkvh2mslu66gyle
default_ledger: ethereum
required_ledgers:
- ethereum
- cosmos
default_routing: {}
connection_private_key_paths: {}
private_key_paths: {}
logging_config:
  version: 1
  disable_existing_loggers: false
  formatters:
    standard:
      format: '[%(asctime)s] [%(levelname)s] %(message)s'
  handlers:
    logfile:
      class: logging.FileHandler
      formatter: standard
      filename: ${LOG_FILE:str:log.txt}
      level: INFO
    console:
      class: logging.StreamHandler
      formatter: standard
      stream: ext://sys.stdout
  loggers:
    aea:
      handlers:
      - logfile
      - console
      propagate: false
skill_exception_policy: stop_and_exit
dependencies:
  open-aea-ledger-ethereum:
    version: ==1.37.0
default_connection: null
---
public_id: valory/abci:0.1.0
type: connection
config:
  target_skill_id: valory/market_maker_abci:0.1.0
  host: ${str:localhost}
  port: ${int:26658}
  use_tendermint: ${bool:false}
---
public_id: valory/ledger:0.19.0
type: connection
config:
  ledger_apis:
    ethereum:
      address: ${str:https://rpc.gnosischain.com}
      chain_id: ${int:100}
      poa_chain: ${bool:false}
      default_gas_price_strategy: ${str:eip1559}
---
public_id: valory/openai:0.1.0
type: connection
config:
  engine: ${str:gpt-4}
  max_tokens: ${int:500}
  openai_api_key: ${str:null}
  temperature: ${float:0.7}
---
public_id: valory/p2p_libp2p_client:0.1.0
type: connection
config:
  nodes:
  - uri: ${str:acn.staging.autonolas.tech:9005}
    public_key: ${str:02d3a830c9d6ea1ae91936951430dee11f4662f33118b02190693be835359a9d77}
cert_requests:
- identifier: acn
  ledger_id: ethereum
  message_format: '{public_key}'
  not_after: '2023-01-01'
  not_before: '2022-01-01'
  public_key: ${str:02d3a830c9d6ea1ae91936951430dee11f4662f33118b02190693be835359a9d77}
  save_path: .certs/acn_cosmos_11000.txt
is_abstract: false
---
public_id: valory/market_maker_abci:0.1.0
type: skill
models:
  benchmark_tool:
    args:
      log_dir: ${str:/logs}
  params:
    args:
      market_identification_prompt: ${str:You are an LLM inside a multi-agent system.
        Your task is to propose a collection of prediction market\nquestions based
        on your input. Your input is under the label \"INPUT\". You must follow the
        instructions\nunder \"INSTRUCTIONS\". You must provide your response in the
        format specified under \"OUTPUT_FORMAT\".\n\nINSTRUCTIONS\n* Read the input
        under the label \"INPUT\" delimited by three backticks.\n* The \"INPUT\" specifies
        a list of recent news headlines, their date, and short descriptions.\n* Based
        on the \"INPUT\" and your training data, you must provide a list of binary
        questions, valid\n    answers and resolution dates to create prediction markets.\n*
        Each market must satisfy the following conditions;\n    - The outcome of the
        market is unknown at the present date.\n    - The outcome of the market must
        be known by its resolution date.\n    - The outcome of the market must be
        related to a deterministic, measurable or verifiable fact.\n    - Questions
        whose answer is known at the present date are invalid.\n    - Questions whose
        answer is subjective or opinionated are invalid.\n    - Questions with relative
        dates are invalid.\n    - Questions about moral values, subjective opinions,
        and not facts are invalid.\n    - Questions in which none of the answers are
        valid will resolve as invalid.\n    - Questions with multiple valid answers
        are invalid.\n    - Questions must not incentivize committing an immoral violent
        action.\n    - The dates in the question need to be in YYYY-MM-DD format.\n*
        The created markets must be different and not overlap semantically.\n* You
        must provide your response in the format specified under \"OUTPUT_FORMAT\".\n*
        Do not include any other contents in your response.\n\nINPUT\n{input_news}\n\nOUTPUT_FORMAT\n*
        Your output response must be only a single JSON array to be parsed by Python\'s
        \"json.loads()\".\n* The JSON array must be of length 5.\n* All of the date
        strings should be represented in YYYY-MM-DD format.\n* Each entry of the JSON
        array must be a JSON object containing the fields;\n    - question; The binary
        question to open a prediction market.\n    - answers; The possible answers
        to the question.\n    - resolution_date; The resolution date for the outcome
        of the market to be verified.\n    - topic; One word description of the topic
        of the news and it should be one of; {topics}.\n* Output only the JSON object.
        Do not include any other contents in your response.}
      num_markets: ${int:1}
      market_approval_server_url: ${str:http://127.0.0.1:5000}
      market_approval_server_api_key: ${str:api_key}
      newsapi_endpoint: ${str:https://newsapi.org/v2/everything}
      newsapi_api_key: ${str:f1ea36ae6175474bbcbae11eca64d0b9}
      topics: ${list:["business","cryptocurrency","politics","science","technology"]}
      market_fee: ${float:2.0}
      initial_funds: ${float:1.0}
      market_timeout: ${int:1}
      minimum_market_time: ${int:7}
      realitio_contract: ${str:0x79e32aE03fb27B07C89c0c568F80287C01ca2E57}
      realitio_oracle_proxy_contract: ${str:0xab16d643ba051c11962da645f74632d3130c81e2}
      conditional_tokens_contract: ${str:0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce}
      fpmm_deterministic_factory_contract: ${str:0x9083A2B699c0a4AD06F63580BDE2635d26a3eeF0}
      collateral_tokens_contract: ${str:0xe91d153e0b41518a2ce8dd3d7944fa863463a97d}
      arbitrator_contract: ${str:0xe40dd83a262da3f56976038f1554fe541fa75ecd}
      multisend_address: ${str:0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761}
      on_chain_service_id: ${int:null}
      reset_tendermint_after: ${int:2}
      reset_pause_duration: ${int:30}
      service_id: market_maker
      service_registry_address: ${str:0x1cEe30D08943EB58EFF84DD1AB44a6ee6FEff63a}
      setup:
        all_participants: ${list:["0x10E867Ac2Fb0Aa156ca81eF440a5cdf373bE1AaC"]}
        safe_contract_address: ${str:0x89c5cc945dd550BcFfb72Fe42BfF002429F46Fec}
        consensus_threshold: ${int:null}
      share_tm_config_on_startup: ${bool:false}
      tendermint_check_sleep_delay: ${int:3}
      tendermint_com_url: ${str:http://localhost:8080}
      tendermint_max_retries: ${int:5}
      tendermint_url: ${str:http://localhost:26657}
      tendermint_p2p_url: ${str:localhost:26656}
      termination_sleep: ${int:900}
      tx_timeout: ${float:10.0}
      use_termination: ${bool:false}
is_abstract: false
