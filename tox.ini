; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, check-hash, check-packages, check-dependencies, flake8, mypy, pylint, darglint, check-generate-all-protocols, abci-docstrings, check-abciapp-specs, py{3.7,3.8,3.9,3.10}-{win,linux,darwin}
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true
isolated_build = True

[deps-tests]
deps =
    cython<3
    wheel==0.40.0
    tomte[tests]==0.2.15

[deps-packages]
deps =
    {[deps-tests]deps}
    open-autonomy==0.14.12
    toml==0.10.2
    hypothesis==6.21.6
    grpcio==1.53.0
    typing-extensions==4.7.1
    py-ecc==6.0.0
    aiohttp<4.0.0,>=3.8.5
    asn1crypto<1.5.0,>=1.4.0
    open-aea-ledger-ethereum==1.52.0
    open-aea-ledger-cosmos==1.52.0
    openai==1.12.0
    protobuf<4.25.0,>=4.21.6
    open-aea-test-autonomy==0.14.12
    ipfshttpclient==0.8.0a2
    open-aea-cli-ipfs==1.52.0
    requests==2.28.1
    pytest-asyncio
    ecdsa>=0.15
    open-aea-ledger-cosmos==1.52.0
    certifi
    multidict
    py-eth-sig-utils
    web3<7,>=6.0.0
    eth_typing
    pytz==2022.2.1
    typing_extensions>=3.10.0.2
    hexbytes
    packaging
    openapi-core==0.15.0
    openapi-spec-validator<0.5.0,>=0.4.0

[testenv]
basepython = python3
whitelist_externals = /bin/sh
passenv = *
extras = all
deps = {[deps-packages]deps}
setenv =
    PYTHONHASHSEED=0
    PACKAGES_PATHS = packages
    SERVICE_SPECIFIC_PACKAGES = packages/valory/contracts/fpmm_deterministic_factory packages/valory/skills/market_creation_manager_abci packages/valory/skills/market_maker_abci packages/valory/contracts/fpmm packages/valory/contracts/wxdai
commands =
    autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    autonomy packages sync
    pytest -rfE --doctest-modules tests/ --cov=packages --cov-report=xml --cov-report=term --cov-report=term-missing --cov-config=.coveragerc {posargs}

[testenv:py3.7-linux]
basepython = python3.7
platform=^linux$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.8-linux]
basepython = python3.8
platform=^linux$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.9-linux]
basepython = python3.9
platform=^linux$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.10-linux]
basepython = python3.10
platform=^linux$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.7-win]
basepython = python3.7
platform=^win32$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.8-win]
basepython = python3.8
platform=^win32$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.9-win]
basepython = python3.9
platform=^win32$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.10-win]
basepython = python3.10
platform=^win32$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.7-darwin]
basepython = python3.7
platform=^darwin$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.8-darwin]
basepython = python3.8
platform=^darwin$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.9-darwin]
basepython = python3.9
platform=^darwin$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:py3.10-darwin]
basepython = python3.10
platform=^darwin$
usedevelop = True
deps = {[testenv]deps}
setenv = {[testenv]setenv}

[testenv:bandit]
skipsdist = True
skip_install = True
deps = tomte[bandit]==0.2.14
commands =
    bandit -s B101 -r {env:SERVICE_SPECIFIC_PACKAGES}
    bandit -s B101 -r scripts
    bandit -s B101 -r notebooks
    bandit -s B101 -r market_approval_server

[testenv:black]
skipsdist = True
skip_install = True
deps = tomte[black]==0.2.14
commands = black {env:SERVICE_SPECIFIC_PACKAGES} scripts notebooks market_approval_server

[testenv:black-check]
skipsdist = True
skip_install = True
deps = tomte[black]==0.2.14
commands = black --check {env:SERVICE_SPECIFIC_PACKAGES} scripts notebooks market_approval_server

[testenv:isort]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.14
commands =
    isort {env:SERVICE_SPECIFIC_PACKAGES} --gitignore
    isort scripts/
    isort notebooks/
    isort market_approval_server/

[testenv:isort-check]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.14
commands = isort --check-only --gitignore {env:SERVICE_SPECIFIC_PACKAGES} scripts notebooks market_approval_server

[testenv:check-hash]
skipsdist = True
skip_install = True
deps = {[testenv]deps}
commands = python -m autonomy.cli packages lock --check {posargs}

[testenv:check-packages]
skipsdist = True
skip_install = True
deps = {[testenv]deps}
commands =
    autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    autonomy packages sync
    autonomy check-packages

[testenv:check-dependencies]
skipsdist = True
usedevelop = True
commands =
    autonomy packages sync
    {toxinidir}/scripts/check_dependencies.py

[testenv:flake8]
skipsdist = True
skip_install = True
deps = tomte[flake8]==0.2.14
commands =
    flake8 {env:SERVICE_SPECIFIC_PACKAGES}
    flake8 scripts
    flake8 notebooks
    flake8 market_approval_server

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
    {[testenv]deps}
    tomte[mypy]==0.2.15
commands = mypy packages/valory/contracts/fpmm_deterministic_factory packages/valory/skills/market_creation_manager_abci packages/valory/skills/market_maker_abci packages/valory/contracts/fpmm packages/valory/contracts/wxdai --disallow-untyped-defs --config-file tox.ini


[testenv:pylint]
whitelist_externals = /bin/sh
skipsdist = True
deps =
    {[deps-packages]deps}
    tomte[pylint]==0.2.15
commands = pylint --ignore-patterns=".*_pb2.py" --ignore-paths="^packages/valory/.*$" --disable=C0103,R0801,R0912,C0301,C0201,C0204,C0209,W1203,C0302,R1735,R1729,W0511,E0401 {env:SERVICE_SPECIFIC_PACKAGES} scripts notebooks market_approval_server

[testenv:safety]
skipsdist = True
skip_install = True
deps = tomte[safety]==0.2.14
commands = safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 41002 -i 51358 -i 51499 -i 67599 -i 70612

[testenv:darglint]
skipsdist = True
skip_install = True
deps = tomte[darglint]==0.2.14
commands = darglint scripts notebooks market_approval_server {env:SERVICE_SPECIFIC_PACKAGES}/*

[testenv:check-generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.2.15
    tomte[black]==0.2.15
commands = aea generate-all-protocols --check-clean

[testenv:abci-docstrings]
skipsdist = True
usedevelop = True
commands = autonomy analyse docstrings --update

[testenv:check-doc-hashes]
skipsdist = True
skip_install = True
commands =
    aea init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    aea packages sync
    {toxinidir}/scripts/check_doc_ipfs_hashes.py

[testenv:check-abciapp-specs]
skipsdist = True
usedevelop = True
commands =  autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
            autonomy packages sync
            autonomy analyse fsm-specs

[testenv:spell-check]
whitelist_externals = mdspell
skipsdist = True
usedevelop = True
deps = tomte[cli]==0.2.14
commands = tomte check-spelling

[testenv:liccheck]
skipsdist = True
usedevelop = True
deps = tomte[liccheck,cli]==0.2.14
commands =
    tomte freeze-dependencies --output-path {envtmpdir}/requirements.txt
    liccheck -s tox.ini -r {envtmpdir}/requirements.txt -l PARANOID


[flake8]
paths=packages
exclude=.md,
    *_pb2.py,
    *_pb2_grpc.py,
    custom_types.py,
    packages/valory/connections,
    packages/valory/skills/abstract_abci,
    packages/valory/skills/abstract_round_abci,
    packages/valory/skills/registration_abci,
    packages/valory/skills/reset_pause_abci,
    packages/valory/skills/termination_abci,
    packages/valory/skills/transaction_settlement_abci,
    packages/valory/protocols,
    packages/open_aea
max-line-length = 88
select = B,C,D,E,F,I,W,
ignore = E203,E501,W503,D202,B014,D400,D401,DAR
application-import-names = packages,tests,scripts,notebooks,market_approval_server

# ignore as too restrictive for our needs:
# D400: First line should end with a period
# D401: First line should be in imperative mood
# E501: https://www.flake8rules.com/rules/E501.html (Line too long)
# E203: https://www.flake8rules.com/rules/E203.html (Whitespace)
# W503: https://www.flake8rules.com/rules/W503.html (Line break)
# D202: blank lines
# B014: redundant exception

[isort]
# for black compatibility
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
ensure_newline_before_comments = True
line_length=88
# custom configurations
order_by_type=False
case_sensitive=True
lines_after_imports=2
skip=
skip_glob =
known_first_party=autonomy
known_packages=packages
known_local_folder=tests
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,PACKAGES,LOCALFOLDER

[mypy]
python_version = 3.10
strict_optional = True
exclude=(.*_pb2|.*custom_types)

[mypy-aea.*]
ignore_missing_imports = True

[mypy-packages.open_aea.*]
ignore_errors=True

[mypy-packages.valory.connections.*]
ignore_errors=True

[mypy-packages.valory.contracts.*]
ignore_errors=True

[mypy-packages.valory.protocols.*]
ignore_errors=True

[mypy-packages.valory.skills.abstract_abci.*]
ignore_errors=True

[mypy-packages.valory.skills.abstract_round_abci.*]
ignore_errors=True

[mypy-packages.valory.skills.mech_interact_abci.*]
ignore_errors=True

[mypy-packages.valory.skills.registration_abci.*]
ignore_errors=True

[mypy-packages.valory.skills.termination_abci.*]
ignore_errors=True

[mypy-packages.valory.skills.transaction_settlement_abci.*]
ignore_errors=True

[mypy-requests]
ignore_missing_imports=True

[mypy-yaml]
ignore_missing_imports=True

[mypy-aea_test_autonomy.*]
ignore_missing_imports = True

[mypy-web3.*]
ignore_missing_imports = True

[mypy-click.*]
ignore_missing_imports=True

[mypy-autonomy.*]
ignore_missing_imports=True

[darglint]
docstring_style=sphinx
strictness=short
ignore_regex=async_act
ignore=DAR401

[pytest]
log_cli = 1
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format=%Y-%m-%d %H:%M:%S
asyncio_mode=strict

markers =
    integration: marks integration tests which require other network services
    e2e: marks end-to-end agent tests

filterwarnings = ignore::DeprecationWarning:aea.*:

; some useful links:
; - https://janelia-flyem.github.io/licenses.html
; - https://dwheeler.com/essays/floss-license-slide.html

; Authorized and unauthorized licenses in LOWER CASE
[Licenses]
authorized_licenses:
    ; aliases for MIT License
    MIT
    MIT license
    https://opensource.org/licenses/MIT
    License :: OSI Approved :: MIT
    ; TOFIX
    Mozilla Public License 2.0 (MPL 2.0)
    ; aliases for BSD License (and variants)
    BSD
    BSD license
    new BSD
    (new) BSD
    new BDS license
    simplified BSD
    3-Clause BSD
    BSD-3-Clause
    BSD 3-Clause
    BSD-2-Clause
    BSD-like
    BSD-2-Clause or Apache-2.0
    BSD, Public Domain

        ; Apache
        Apache Software

    ; aliases for Apache License version 2.0
    Apache 2.0
    Apache-2.0
    Apache License 2.0
    Apache License, Version 2.0
    Apache License Version 2.0
    Apache2
    ASL 2
;   some packages use 'Apache Software' as license string,
;   which is ambiguous. However, 'Apache Software'
;   will likely match with 'Apache 2.0'
    Apache Software
    BSD, Public Domain, Apache
    http://www.apache.org/licenses/LICENSE-2.0

;   PSF (BSD-style)
    Python Software Foundation
    PSF

    ; other permissive licenses
    Historical Permission Notice and Disclaimer (HPND)
    HPND
    ISC
    BSD or Apache License, Version 2.0
    Modified BSD
    Expat
        Public Domain

unauthorized_licenses:
;   aliases for MPL 2.0
    MPL-2.0
    MPL 2.0
    Mozilla Public License 2.0 (MPL 2.0)

;    Section 8 of https://www.mozilla.org/en-US/MPL/2.0/Revision-FAQ/
    MPL 1.1
    MPL-1.1

;   http://www.gnu.org/licenses/license-list.en.html#apache2
    GPLv2
    GPLv2+
    GNU General Public License v2 or later (GPLv2+)

;   LGPL
    LGPL
    GNU Library or Lesser General Public License (LGPL)

;   LGPLv2.1
    LGPLv2.1
    LGPLv2.1+
        GNU Lesser General Public License v2 or later (LGPLv2+)

;   LGPLv3
    GNU Lesser General Public License v3 (LGPLv3)
    LGPLv3

;   GPL v3
    GPL v3
    GPLv3+
        GNU General Public License v3 (GPLv3)

[Authorized Packages]
gym: >=0.15
;filelock is public domain
filelock: >=3.0.12
fetchai-ledger-api: >=0.0.1
chardet: >=3.0.4
certifi: >=2019.11.28
;TODO: the following are conflicting packages that need to be sorted
; sub-dep of open-aea-ledger-ethereum-hwi
hidapi: >=0.13.1
; shows in pip freeze but not referenced on code
paramiko: >=3.1.0
; sub-dep of docker-compose
websocket-client: >=0.59.0
